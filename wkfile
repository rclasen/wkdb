#!/usr/bin/perl

# scan file directories, add/update/remove files entries in db
# TODO: POD

# TODO: move to module

use warnings;
use strict;

use WkDB;
use Workout;
use File::Find;
use Getopt::Long;

my $verbose = 0;
my $needhelp;

GetOptions(
	'debug!'	=> \$verbose,
) or $needhelp++;

if( $needhelp ){
	print STDERR "please use '$0 help' for usage info\n";
	exit 1;
}

my $wk = WkDB->new;
my $db = $wk->db;


my $cmd = shift || '';

if( $cmd eq 'scan' ){
	my $pools = ( scalar @ARGV
		? $db->resultset('Pool')->search( {
			name => { '-in' => \@ARGV },
			})
		: $db->resultset('Pool') );
	
	$db->txn_begin;
	while( defined( my $pool = $pools->next )){
		&scan_pool( $pool );
	}
	$db->txn_commit;


} elsif( $cmd eq 'update' ){
	my $pool_name = shift
		or die 'missing pool name';

	my $pool = $db->resultset('Pool')->search( name => $pool_name )->first
		or die 'no such pool';

	my $getnext = ( scalar @ARGV 
		? sub { shift @ARGV }
		: sub { my $f = scalar <>; chomp $f if defined $f; $f; } );

	$db->txn_begin;
	while( defined( my $f = &$getnext ) ){
		&update_file( $pool, $f );
	}
	$db->txn_commit;;


} elsif( $cmd eq 'list' ){

	my %where;
	if( scalar @ARGV ){
		$where{'pool.name'} = { '-in' => \@ARGV };
	}

	my $files = $db->resultset('File')->search( \%where, {
		join		=> [qw/ pool /],
		prefetch	=> [qw/ pool /],
		order_by	=> [qw/ start /],
	});

	print join("\t", qw/ id start duration exercise pool path /),"\n";
	while( defined( my $p = $files->next )){
		print join("\t", 
			$p->id,
			$p->start,
			$p->duration,
			$p->exercise || '-',
			$p->pool->name,
			$p->path,
		),"\n";
	}



} elsif( $cmd eq 'ignore' ){ # TODO



} elsif( $cmd eq 'addpool' ){
	my( $name, $path, $pattern ) = @ARGV;
	
	$name =~ /^\w+$/
		or die 'invalid pool name';
	File::Spec->file_name_is_absolute( $path )
		or die 'path must be absolute';
	
	my $pool = $db->resultset('Pool')->new({
		name	=> $name,
		path	=> File::Spec->canonpath( $path ),
		pattern	=> $pattern,
	});

	$pool->insert
		or die 'failed to add pool';


} elsif( $cmd eq 'delpool' ){
	my $name = shift;
	$name =~ /^\w+$/
		or die 'invalid pool name';

	my $pool = $db->resultset('Pool')->search( name => $name )->first
		or die 'no such pool';
	$pool->delete;


} elsif( $cmd eq 'listpool' ){

	my $pools = $db->resultset('Pool')->search( undef, {
		order_by => 'name'
	});

	my @fields = (qw/ id name path pattern /);
	print join("\t", @fields ),"\n";
	foreach my $f ( $pools->all ){
		print join( "\t", map {
			$f->$_;
		} @fields),"\n";
	}

} elsif( $cmd eq 'help' ){
	print <<EOF;
usage: $0 <cmd> [<args>...]
operate WkDB file database

commands:
 scan [<pool>...]
	scan file pools for new/updated/delete files

 update <pool> [<fname>...]
	update DB with specified files from cmdline or stdin

 list [<pool>...]
	list all files entries within DB.

 addpool <pool> <path> <pattern>
	add pool to DB

 delpool <pool>
 	delete pool and all currently known file entries from DB

 listpool
	list known pools

 help

EOF
	exit 0;


} else {
	print STDERR "invalid command, please use $0 help for usage info\n";
	exit 1;
}

sub scan_pool {
	my( $pool ) = @_;

	my @files;
	my $pattern = $pool->pattern;

	find( {
		no_chdir => 1,
		wanted => sub {

			# hidden files
			if( $File::Find::name =~ m:/(\.[^/]*|CVS)$: ){
				$File::Find::prune++;
				return;
			}

			# backups
			if( $File::Find::name =~ m:(\.bak|\.sik|\.old|~)$: ){
				$File::Find::prune++;
				return;
			}

			# user's filename pattern
			if( $pattern && $File::Find::name !~ m:$pattern: ){
				return;
			}
				

			# only regular files
			lstat($File::Find::name);
			-f _ or return;

			push @files, $File::Find::name;
		},
	}, $pool->path );

	foreach my $fname ( @files ){
		&update_file( $pool, $fname );
	}

	&purge_pool( $pool );
}

sub purge_pool {
	my( $pool ) = @_;

	my $files = $pool->files;
	while( defined( my $f = $files->next )){
		-r $f->path_abs and next;
		print 'vanished ', $f->id, "/", $pool->name, " ", $f->path, "\n";
		$f->delete;
	}
}

sub relfile {
	my( $base, $fn ) = @_;

	unless( File::Spec->file_name_is_absolute( $fn ) ){
		return File::Spec->canonpath( $fn );
	}

	return File::Spec->abs2rel( $fn, $base );
}

# add / update file
sub update_file {
	my( $pool, $fn ) = @_;

	# TODO: utf8!!!

	my $rel = relfile( $pool->path, $fn );
	my $full = File::Spec->catfile( $pool->path, $rel );


	# ensure file exists and get modification time
	my $mtime = (stat $full)[9]
		or die "stat $full: ";
	my $mdate = DateTime->from_epoch(
		epoch		=> $mtime,
		time_zone	=> 'local',
	);


	my $file = $pool->find_or_new_related( 'files', {
		path	=> $rel,
	});

	if( ! defined $file->mtime || $file->mtime < $mdate ){
		print 'updated ', $pool->name, " $rel\n";
		# TODO: catch unsupported files
		my $in = Workout::file_read( $full );

		my $note = $in->note;
		my $note_id;
		if( defined $note && $note =~ /\bID:(\d+)\b/ ){
			$note_id = $1;
			$verbose && print "file links to ID: $note_id\n";

			my $old = $db->resultset('File')->search( {
				id	=> $1,
			} )->first;

			if( defined($old) ){
			
				if( $old->pool->id == $pool->id && (
					! -r $old->path_abs 
					|| $old->path eq $rel ) ){

					$file = $old;
					$file->path( $rel );

				} else {
					# invalidate note:
					$note_id = undef;
				}
			}
		};

		$file->start( DateTime->from_epoch(
			epoch		=> $in->time_start,
			time_zone	=> 'local',
		));

		$file->duration( $in->dur );
		$file->mtime( $mdate );
		$file->update_or_insert;

		if( $in->cap_note 
			&& ( ! defined($note_id) || $note_id != $file->id ) ){

			$verbose && print "updating notes: $rel\n";

			if( $note ){
				$note =~ s/\s*\bID:\d+\b//;
				$note .= ' ';
			} else {
				$note = '';
			}

			$in->note( $note .'ID:'. $file->id );

			$in->write( "$full.wkfile" );
			unlink $full;
			rename "$full.wkfile", $full;

			$mtime = (stat($full))[9]
				or die "cannot stat updated file: $full";
			$mdate = DateTime->from_epoch(
				epoch		=> $mtime,
				time_zone	=> 'local',
			);

			$file->mtime( $mdate );
			$file->update;
		}


	} else {
		$verbose && print "unchanged: $rel\n";
	};
}



