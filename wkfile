#!/usr/bin/perl

# scan file directories, add/update/remove files entries in db
# TODO: POD

# TODO: move to module
# TODO: merge with wkdb

use warnings;
use strict;

use WkDB;
use Workout;
use File::Find;
use Getopt::Long;

my $verbose = 0;
my $needhelp;

GetOptions(
	'verbose!'	=> \$verbose,
) or $needhelp++;

if( $needhelp ){
	print STDERR "please use '$0 help' for usage info\n";
	exit 1;
}

my $wk = WkDB->new;
my $db = $wk->db;


my $cmd = shift || '';

if( $cmd eq 'scan' ){
	my $pools = ( scalar @ARGV
		? $db->resultset('Pool')->search( {
			name => { '-in' => \@ARGV },
			})
		: $db->resultset('Pool') );

	$db->txn_begin;
	while( defined( my $pool = $pools->next )){
		&scan_pool( $pool );
	}
	$db->txn_commit;


} elsif( $cmd eq 'update' ){
	my $pool_name = shift
		or die 'missing pool name';

	my $pool = $db->resultset('Pool')->search( name => $pool_name )->first
		or die 'no such pool';

	my $getnext = ( scalar @ARGV
		? sub { shift @ARGV }
		: sub { my $f = scalar <>; chomp $f if defined $f; $f; } );

	$db->txn_begin;
	while( defined( my $f = &$getnext ) ){
		&update_file( $pool, $f );
	}
	$db->txn_commit;;


} elsif( $cmd eq 'list' ){

	my %where;
	if( scalar @ARGV ){
		$where{'pool.name'} = { '-in' => \@ARGV };
	}

	my $files = $db->resultset('File')->search( \%where, {
		join		=> [qw/ pool /],
		prefetch	=> [qw/ pool /],
		order_by	=> [qw/ start /],
	});

	print join("\t", qw/ id start duration exercise pool path /),"\n";
	while( defined( my $p = $files->next )){
		my $start = DateTime->from_epoch(
			epoch => $p->start,
			time_zone => 'local',
		);
		print join("\t",
			$p->id,
			$start->datetime,
			$p->duration,
			$p->exercise || '-',
			$p->pool->name,
			$p->path,
		),"\n";
	}



} elsif( $cmd eq 'ignore' ){ # TODO



} elsif( $cmd eq 'addpool' ){
	my( $name, $path, $pattern ) = @ARGV;

	$name =~ /^\w+$/
		or die 'invalid pool name';
	File::Spec->file_name_is_absolute( $path )
		or die 'path must be absolute';

	my $pool = $db->resultset('Pool')->new({
		name	=> $name,
		path	=> File::Spec->canonpath( $path ),
		pattern	=> $pattern,
	});

	$pool->insert
		or die 'failed to add pool';


} elsif( $cmd eq 'delpool' ){
	my $name = shift;
	$name =~ /^\w+$/
		or die 'invalid pool name';

	my $pool = $db->resultset('Pool')->search( name => $name )->first
		or die 'no such pool';
	$pool->delete;


} elsif( $cmd eq 'listpool' ){

	my $pools = $db->resultset('Pool')->search( undef, {
		order_by => 'name'
	});

	my @fields = (qw/ id name wktype path pattern /);
	print join("\t", @fields ),"\n";
	foreach my $f ( $pools->all ){
		print join( "\t", map {
			$f->$_||'';
		} @fields),"\n";
	}

} elsif( $cmd eq 'help' ){
	print <<EOF;
usage: $0 <cmd> [<args>...]
operate WkDB file database

commands:
 scan [<pool>...]
	scan file pools for new/updated/delete files

 update <pool> [<fname>...]
	update DB with specified files from cmdline or stdin

 list [<pool>...]
	list all files entries within DB.

 addpool <pool> <path> <pattern>
	add pool to DB

 delpool <pool>
 	delete pool and all currently known file entries from DB

 listpool
	list known pools

 help

EOF
	exit 0;


} else {
	print STDERR "invalid command, please use $0 help for usage info\n";
	exit 1;
}

sub scan_pool {
	my( $pool ) = @_;

	my @files;
	my $pattern = $pool->pattern;

	find( {
		no_chdir => 1,
		wanted => sub {

			# hidden files
			if( $File::Find::name =~ m:/(\.[^/]*|CVS)$: ){
				$File::Find::prune++;
				return;
			}

			# backups
			if( $File::Find::name =~ m:(\.bak|\.sik|\.old|~)$: ){
				$File::Find::prune++;
				return;
			}

			# user's filename pattern
			if( $pattern && $File::Find::name !~ m:$pattern: ){
				return;
			}


			# only regular files
			lstat($File::Find::name);
			-f _ or return;

			push @files, $File::Find::name;
		},
	}, $pool->path );

	foreach my $fname ( sort { $a cmp $b } @files ){
		&update_file( $pool, $fname );
	}

	&purge_pool( $pool );
}

sub purge_pool {
	my( $pool ) = @_;

	my $files = $pool->files;
	while( defined( my $f = $files->next )){
		-r $f->path_abs and next;
		print 'vanished ', $f->id, " ", $pool->name, " ", $f->path, "\n";
		$f->delete;
	}
}

sub relfile {
	my( $base, $fn ) = @_;

	unless( File::Spec->file_name_is_absolute( $fn ) ){
		return File::Spec->canonpath( $fn );
	}

	return File::Spec->abs2rel( $fn, $base );
}


# add / update file
sub update_file {
	my( $pool, $fn ) = @_;

	# TODO: utf8!!!

	my $rel = relfile( $pool->path, $fn );
	my $full = File::Spec->catfile( $pool->path, $rel );

	local $| = 1;
	$verbose && print 'checking ' , $pool->name, ' ', $rel, ':';

	my $mtime = (stat $full)[9];

	my $pfile = $pool->find_related( 'files', {
		path	=> $rel,
	});

	my $dbup;
	#$dbup = 1; # TODO: optionally update *ALL* files' metadata

	# name in db -> if modified: update db, update note
	if( $pfile ){
		if( $pfile->mtime < $mtime ){
			$verbose && print ' modified=', $pfile->id;
			$dbup++;

		} else {
			$verbose && print ' unchanged=', $pfile->id;

		}
	}

	my $in;
	my $note;
	my $note_id;
	if( ! $pfile || $dbup){
		# TODO: catch unsupported files
		$in = Workout::file_read( $full )
			or die "failed to read $full";

		if( ! $in->chunk_count ){
			$verbose && print " empty.\n";
			return;
		}

		$note = $in->note;

		if( $note && $note =~ /\bID:(\d+)\b/ ){
			$note_id = $1;
			$verbose && print ' id=', $note_id;
		}
	}

	# else if id set, in same pool -> update db
	if( ! $pfile && defined $note_id ){
		#$verbose && print "file links to ID: $note_id\n";

		$pfile = $db->resultset('File')->search( {
			id	=> $note_id,
		} )->first;

		if( ! $pfile ){
			#$verbose && print "file ID:$note_id not in DB\n";

		} elsif( $pfile->pool->id != $pool->id ){
			#$verbose && print "file ID:$note_id in wrong pool\n";
			$pfile = undef;

		} elsif( -r $pfile->path_abs ){
			#$verbose && print "file ID:$note_id still exists\n";
			$pfile = undef;

		} else {
			$verbose && print ' moved=', $pfile->id;
			$dbup++;
		}

	}

	# else not in db -> add to db, update note
	if( ! $pfile ){
		$verbose && print ' new';
		$pfile = $pool->add_to_files({
			path	=> $rel,
		});
		$dbup++;
	}


	my @up;
	if( $dbup ){
		if( $verbose ){
			print ' DB';
		} else {
			push @up, "DB";
		}

		$pfile->start( $in->time_start );
		$pfile->path( $rel );
		$pfile->duration( $in->dur );
		$pfile->mtime( $mtime );
		$pfile->update_or_insert;
	}

	if( $in && $in->cap_note && (
		! defined $note_id or $note_id != $pfile->id  )){

		if( $verbose ){
			print ' ID';
		} else {
			push @up, "ID";
		}


		if( $note ){
			$note =~ s/\s*\bID:\d+\b\s*//;
			$note =~ s/\s*$/ /;
		} else {
			$note = '';
		}

		$in->note( $note .'ID:'. $pfile->id );

		# TODO: safe tempfile
		$in->write( "$full.wkfile" );
		unlink $full;
		rename "$full.wkfile", $full;

		$pfile->mtime( (stat($full))[9] );
		$pfile->update;
	}

	if( $verbose ){
		print ".\n";

	} elsif( @up ){
		print 'updated ' , $pfile->id, ' ', $pool->name, ' ', $rel,
			':', join(',', @up),"\n";
	}
}



