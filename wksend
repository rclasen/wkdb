#!/usr/bin/perl
#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

# convert srm to hrm
# ... merge gpx ele into hrm when available
# get summary info
# generate body

# TODO: pod

# TODO: get unsent exercises from DB

use strict;
use warnings;
use Getopt::Long;
use File::Temp qw/tempfile tempdir/;
use Workout;
use Workout::Athlete;
use WkDB;

my @fields;
my $recint = 5;
my $mailto;
my $debug;

my $wanthelp;
my $needhelp;

GetOptions(
	'fields|f=s'	=> \@fields,
	'mailto|m=s'	=> \$mailto,
	'recint|r=i'	=> \$recint,
	'help|h!'	=> \$wanthelp,
	'debug!'	=> \$debug,
) or $needhelp++;

if( ! $mailto ){
	print STDERR "missing mail address\n";
	$needhelp++;
}

if( @fields ){
	@fields = split(/,/,join(',',@fields));
} else {
	#@fields ||= (qw( time dur dist spd cad hr work pwr));
	@fields = qw( ele );
}

# TODO: take workout_id as argument!

my $fid1 = shift;
if( !defined($fid1) || $fid1 !~ /^\d+$/  ){
	print STDERR "missing/bad input file id\n";
	$needhelp++;
}

my $fid2 = shift;
if( defined $fid2 && $fid2 !~ /^\d+$/ ){
	print STDERR "bad secondary file id\n";
	$needhelp++;
}

if( @ARGV ){
	print STDERR "too many arguments\n";
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <file-id> [<file-id>]
prepare workout data for mailing it to the trainer

Options:
--fields|f=<f>      fields to merge from second file
--mailto|-m=<addr>  where to send the files to
--recint|-r=<int>   sampling interval (default=5)
--help              this cruft
--debug             enable debuging output
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}

my $ath = Workout::Athlete->new;
my $wk = WkDB->new;
my $db = $wk->db;

# read first file
my $f1 = $db->resultset('File')->find( $fid1 )
	or die "no such file: $fid1";
my @attach = $f1->path_abs;

my $wk1 = 
	Workout::filter( 'Resample', 
	Workout::filter( 'Join',
	Workout::file_read( $f1->path_abs, { debug => $debug } ), 
	{ recint => $recint, debug => $debug } ),
	{ recint => $recint, debug => $debug } );



my $merge = $wk1;
my $f2;
if( $fid2 ){
	# read second file
	$f2 = $db->resultset('File')->find( $fid2 )
		or die "no such file: $fid2";

	my $wk2 = Workout::filter( 'Join',
		Workout::file_read( $f2->path_abs, { debug => $debug } ),
		{ debug => $debug });
		
	$merge = Workout::filter( 'Merge', $wk2, {
		master	=> $wk1,
		fields	=> \@fields,
		debug	=> $debug,
	});

	push @attach, $f2->path_abs;
}

my $info = Workout::filter( 'Info', $merge, { debug => $debug } );
my $dst = Workout::file_new( { 
	ftype	=> "hrm",
	recint	=> $recint, 
	athlete	=> $ath,
	debug	=> $debug,
} );
$dst->from( $info );

# write hrm
my $sdate = DateTime->from_epoch( 
	epoch		=> $info->time_start,
	time_zone	=> 'local',
);

my $dir = tempdir;
my $hfname = $dir . $sdate->strftime( '/%F_%H%M.hrm');
push @attach ,$hfname;

open( my $hfh, '>', $hfname )
	or die "open hrm: $!";
$dst->write( $hfh );
close( $hfh );


# zip attachments:  hfname, $f1, $f2
my $zfname = $dir . $sdate->strftime( '/%F_%H%M.zip' );
system( qw/ zip -D -j -q -X -9 /, $zfname, @attach ) == 0
	or die;




# generate message template
my( $bfh, $bfname ) = tempfile;
print $bfh 
"Hallo erstmal!

anbei eine weitere Aufzeichnung.

Start:        ", $sdate->strftime( '%F %H:%M:%S' ), "
Dauer:        ", &fmtdur( $info->dur ), " h:m:s
Fahrzeit:     ", &fmtdur( $info->dur_mov ), " h:m:s
Kurbelnd:     ", fmtdur( $info->dur_ncad ), " h:m:s (",
	sprintf('%.2f', ($info->cad_percent||0) ), "%)
Strecke:      ", sprintf( '%1.1f', ($info->dist || 0) / 1000), " km
Puls Avg:     ", (int($info->hr_avg||0)||'?'), " 1/s
Leistung Avg: ", (int($info->pwr_avg||0)||'?'), " Watt
Bergauf:      ", (int($info->incline||0)||'?'), " m

Rainer

";
close($bfh);

# open mailer
my @arg = (
	'mutt', 
	'-e', 'set sig_dashes',
	'-e', 'send-hook . "set signature=~/template/mail.signature"',
	'-s', $sdate->strftime('Training %F %H:%M'),
	'-i', $bfname,
	'-a', $zfname,
	$mailto,
);

system( @arg );
#mutt -s "Training $timstr" -i $body -a $srm -a $hrm -a $gpx $mailto

sub fmtdur {
	my $s = shift;
	my $m = int($s / 60); $s %= 60;
	my $h = int($m / 60); $m %= 60;
	sprintf('%d:%02d:%02d', $h, $m, $s);
}

