#!/usr/bin/perl
#
# Copyright (c) 2008 Rainer Clasen
#
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

# convert to hrm (that's what the trainer likes most)
# get summary info
# generate body

# TODO: pod

# TODO: get unsent exercises from DB

use strict;
use warnings;
use Getopt::Long;
use File::Temp qw/tempfile tempdir/;
use Workout;
use Workout::Athlete;
use WkDB;

my $recint = 5;
my $mailto;
my $debug;

my $wanthelp;
my $needhelp;

GetOptions(
	'debug!'	=> \$debug,
	'help|h!'	=> \$wanthelp,
	'mailto=s'	=> \$mailto,
	'recint=i'	=> \$recint,
) or $needhelp++;

my $wkid = shift;
if( $wkid !~ /^\d+$/ ){
	print STDERR "invalid workout id\n";
	$needhelp++;
}

if( @ARGV ){
	print STDERR "too many arguments\n";
	$needhelp++;
}

if( ! $mailto ){
	print STDERR "missing mail address\n";
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <workout-id>
prepare and mail workout data to the trainer

Options:
--mailto=<addr>     where to send the files to
--recint=<int>      sampling interval (default=5)

--debug             enable debuging output
--help              this cruft
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "please use $0 --help for usage info\n";
	exit 1;
}

my $wkdb = WkDB->new;
my $db = $wkdb->db;

# get files
my $fset = $db->resultset('File')->search({
	exercise	=> $wkid,
}) or die "no files for workout: $wkid";

my %files;
my @attach;
foreach my $f ( $fset->all ){
	my $n = $f->pool->name;
	my $p = $f->path_abs;

	$debug && print STDERR "adding file ". $f->id .": $p\n";
	exists $files{$n}
		and die "multiple files per pool are not supported";

	$files{$n} = $f;
	push @attach, $p;
}

# TODO: automagically pick/merge the data from several files

# TODO: don't hardcode pool-specifc behavior

my $wk;
foreach my $n ( qw/ srm hrm gpx /, keys %files ){
	if( exists $files{$n} ){
		$wk = $files{$n}->workout({ debug => $debug });
		last;
	}
}

$wk
	or die "failed to identify source workout";


# get info

my $info =
	Workout::filter( 'Info',
	Workout::filter( 'Resample',
	Workout::filter( 'Join',
	$wk,
	{ recint => $recint, debug => $debug } ),
	{ recint => $recint, debug => $debug } ),
	{ debug => $debug } );

my $ath ||= Workout::Athlete->new;
my $dst = Workout::file_new( {
	ftype	=> "hrm",
	recint	=> $recint,
	athlete	=> $ath,
	debug	=> $debug,
} );

$dst->from( $info );


my $dir = tempdir;
my $sdate = DateTime->from_epoch(
	epoch		=> $info->time_start,
	time_zone	=> 'local',
);

# write hrm
if( ! $files{hrm} ){
	my $hfname = $dir . $sdate->strftime( '/%F_%H%M.hrm');
	push @attach ,$hfname;

	open( my $hfh, '>', $hfname )
		or die "open hrm: $!";
	$dst->write( $hfh );
	close( $hfh );
}


# TODO: get further details from EndureDB: notes, bike, ...

# zip attachments:  hfname, $f1, $f2
my $zfname = $dir . $sdate->strftime( '/%F_%H%M.zip' );
system( qw/ zip -D -j -q -X -9 /, $zfname, @attach ) == 0
	or die;




# generate message template
my( $bfh, $bfname ) = tempfile;
print $bfh
"Hallo erstmal!

anbei eine weitere Aufzeichnung.

Start:        ", $sdate->strftime( '%F %H:%M:%S' ), "
Dauer:        ", &fmtdur( $info->dur ), " h:m:s
Fahrzeit:     ", &fmtdur( $info->dur_mov ), " h:m:s
Kurbelnd:     ", fmtdur( $info->dur_ncad ), " h:m:s (",
	sprintf('%.2f', ($info->cad_percent||0) ), "%)
Strecke:      ", sprintf( '%1.1f', ($info->dist || 0) / 1000), " km
Puls Avg:     ", (int($info->hr_avg||0)||'?'), " 1/s
Leistung Avg: ", (int($info->pwr_avg||0)||'?'), " Watt
Bergauf:      ", (int($info->incline||0)||'?'), " m

Rainer

";
close($bfh);

# open mailer
my @arg = (
	'mutt',
	'-e', 'set sig_dashes',
	'-e', 'send-hook . "set signature=~/template/mail.signature"',
	'-s', $sdate->strftime('Training %F %H:%M'),
	'-i', $bfname,
	'-a', $zfname,
	$mailto,
);

if( $debug ){
	print STDERR "will run: >", join(' ', @arg), "<\n",
		"hit enter to continue";
	<STDIN>;
}

system( @arg );
#mutt -s "Training $timstr" -i $body -a $srm -a $hrm -a $gpx $mailto

sub fmtdur {
	my $s = shift;
	my $m = int($s / 60); $s %= 60;
	my $h = int($m / 60); $m %= 60;
	sprintf('%d:%02d:%02d', $h, $m, $s);
}

