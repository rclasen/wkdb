#!/usr/bin/perl

# edit diary entries

use warnings;
use strict;
use Getopt::Long;
use DateTime;
use WkDB;
use WkDB::Jaufs::Diary;

# TODO: POD
# TODO: add option to use existing file

my $skip;

my $opt_athlete;

my $wanthelp;
my $needhelp;

GetOptions(
	'athlete=s'	=> \$opt_athlete,
	'help!'		=> \$wanthelp,
	'skip!'		=> \$skip,
) or ++$needhelp;

if( $wanthelp ){
	print <<EOF;
usage: $0 [<datespec>]
edit wkdb diary entries.

Options:
--skip		prepare existing entries for skip

--help          this message

datespecs:
 today          default
 yesterday
 -x             today - x days
 yyyy-mm-dd     specified date
 [from]:[to]    range of datespecs
EOF
	exit 0;
}

my( $from, $to );
my $spec = shift;

if( $spec && $spec =~ /:/ ){
	my @spec = split(/:/,$spec);
	$from = &parse_datespec( shift @spec );
	$to = &parse_datespec( shift @spec );

} else {
	$from = $to = &parse_datespec( $spec );
}

if( ! $from ){
	print STDERR "missing/invalid 'from' datespec\n";
	++$needhelp;
}

if( ! $to ){
	print STDERR "missing/invalid 'to' datespec\n";
	++$needhelp;
}

if( $from && $to && $from > $to ){
	print STDERR "invalid datespec range\n";
	++$needhelp;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

my $wk = WkDB->new;
my $db = $wk->db;

$opt_athlete ||= $wk->config( 'athlete' );
my $athlete = $db->resultset('Athlete')->find( $opt_athlete );
if( ! $athlete ){
	print STDERR "no such athlete: $opt_athlete\n";
	exit 1;
}


# write textfile
print $athlete->name, ": preparing entries from ", $from->ymd ," to ", $to->ymd, "...\n";

my $list = &build_list( $from, $to );

my $jaufs = WkDB::Jaufs::Diary->new({
	wk	=> $wk,
});

$jaufs->edit( $list, \&process_list );

sub build_list {
	my( $from, $to ) = @_;

	my @list;

	for( my $date = $from->clone; $date <= $to; $date->add( days => 1 ) ){
		if( my $row = $athlete->search_related( 'diary', {
			day	=> $date->ymd,
		})->first ){
			push @list, {
				$row->get_inflated_columns,
				action		=> $skip ? 'skip' : 'save',
			};

		} else {
			push @list, {
				athlete		=> $athlete,
				day		=> $date->clone,
				action		=> 'save',
			};
		}
	}

	\@list;
}


sub process_list {
	my( $list ) = @_;

	foreach my $ent ( @$list ){
		if( ! $ent->{action} || $ent->{action} eq 'skip' ){
			print "skipping ", $ent->{day}->ymd,"...\n";
			# do nothing

		} elsif( $ent->{action} eq 'delete' ){
			print "deleting ", $ent->{day}->ymd,"...\n";

			$athlete->search_related( 'diary', {
				day     => $ent->{day}->ymd,
			})->delete;

		} elsif( $ent->{action} eq 'save' ){
			my %dat = %$ent;
			delete $dat{action};

			if( my $row = $ent->{athlete}->search_related( 'diary', {
				day     => $ent->{day}->ymd,
			})->first ){
				print "updating ", $ent->{day}->ymd,"...\n";

				$row->update(\%dat);

			} else {
				print "adding ", $ent->{day}->ymd,"...\n";
				$ent->{athlete}->add_to_diary(\%dat);

			}
		}
	}

	1;
}


sub parse_datespec {
	my $spec = shift;

	if( ! defined $spec || $spec =~ /^\s*(|today)\s*$/i ){
		return DateTime->today;

	} elsif( $spec =~ /^\s*yesterday\s*$/i ){
		return DateTime->today->add( days => -1 );

	} elsif( $spec =~ /^\s*(-\d+)\s*$/i ){
		return DateTime->today->add( days => $1 );

	} elsif( $spec =~ /^\s*(\d+)-(\d+)-(\d+)\s*$/i ){
		return DateTime->new(
			year	=> $1,
			month	=> $2,
			day	=> $3,
			time_zone	=> 'local',
		);
	}

	return;
}
