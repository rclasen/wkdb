#!/usr/bin/perl

# edit diary entries

use warnings;
use strict;
use Getopt::Long;
use DateTime;
use WkDB;
use WkDB::Jaufs::Diary;

# TODO: POD
# TODO: add option to use existing file

my $skip;

my $athlete;

my $wanthelp;
my $needhelp;

GetOptions(
	'athlete=s'	=> \$athlete,
	'help!'		=> \$wanthelp,
	'skip!'		=> \$skip,
) or ++$needhelp;

if( $wanthelp ){
	print <<EOF;
usage: $0 [<datespec>]
edit wkdb diary entries.

Options:
--skip		prepare existing entries for skip

--help          this message

datespecs:
 today          default
 yesterday
 -x             today - x days
 yyyy-mm-dd     specified date
 [from]:[to]    range of datespecs
EOF
	exit 0;
}

my( $from, $to );
my $spec = shift;

if( $spec && $spec =~ /:/ ){
	my @spec = split(/:/,$spec);
	$from = &parse_datespec( shift @spec );
	$to = &parse_datespec( shift @spec );

} else {
	$from = $to = &parse_datespec( $spec );
}

if( ! $from ){
	print STDERR "missing/invalid 'from' datespec\n";
	++$needhelp;
}

if( ! $to ){
	print STDERR "missing/invalid 'to' datespec\n";
	++$needhelp;
}

if( $from && $to && $from > $to ){
	print STDERR "invalid datespec range\n";
	++$needhelp;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

my $wk = WkDB->new;
my $db = $wk->db;

$athlete ||= $wk->config( 'athlete' );
if( ! $db->resultset('Athlete')->find( $athlete ) ){
	print STDERR "no such athlete: $athlete\n";
	exit 1;
}


# write textfile
print $athlete, ": preparing entries from ", $from->ymd ," to ", $to->ymd, "...\n";

my $list = &build_list( $from, $to );

my $jaufs = WkDB::Jaufs::Diary->new({
	wk	=> $wk,
});

$jaufs->edit( $list, \&process_list );

sub build_list {
	my( $from, $to ) = @_;

	my @list;

	for( my $date = $from->clone; $date <= $to; $date->add( days => 1 ) ){
		if( my $row = $db->resultset('Diary')->search({
			athlete => $athlete,
			day	=> $date->ymd,
		})->first ){
			push @list, {
				athlete		=> $athlete,
				day		=> $date->clone,
				sleep		=> $row->sleep,
				hr		=> $row->hr,
				temperature	=> $row->temperature,
				weight		=> $row->weight,
				bodyfat		=> $row->bodyfat,
				notes		=> $row->notes,
				action		=> $skip ? 'skip' : 'save',
			};

		} else {
			push @list, {
				athlete		=> $athlete,
				day		=> $date->clone,
				action		=> 'save',
			};
		}
	}

	\@list;
}


sub process_list {
	my( $list ) = @_;

	foreach my $ent ( @$list ){
		next unless $ent->{action};
		next if $ent->{action} eq 'skip';

		my $row = $db->resultset('Diary')->search({
			athlete => $ent->{athlete},
			day     => $ent->{day}->ymd,
		})->first;

		if( $ent->{action} eq 'save' ){
			$row ||= $db->resultset('Diary')->new({
				athlete => $ent->{athlete},
				day	=> $ent->{day},
			});
			print "saving ", $ent->{day}->ymd,"...\n";

			$row->sleep( $ent->{sleep} )
				if exists $ent->{sleep};
			$row->hr( $ent->{hr} )
				if exists $ent->{hr};
			$row->temperature( $ent->{temperature} )
				if exists $ent->{temperature};
			$row->weight( $ent->{weight} )
				if exists $ent->{weight};
			$row->bodyfat( $ent->{bodyfat} )
				if exists $ent->{bodyfat};
			$row->notes( $ent->{notes} )
				if exists $ent->{notes};

			$row->update_or_insert or return;

		} elsif( $ent->{action} eq 'delete' && $row ){
			print "deleting ", $ent->{day}->ymd,"...\n";
			$row->delete or return;

		}
	}

	1;
}


sub parse_datespec {
	my $spec = shift;

	if( ! defined $spec || $spec =~ /^\s*(|today)\s*$/i ){
		return DateTime->today;

	} elsif( $spec =~ /^\s*yesterday\s*$/i ){
		return DateTime->today->add( days => -1 );

	} elsif( $spec =~ /^\s*(-\d+)\s*$/i ){
		return DateTime->today->add( days => $1 );

	} elsif( $spec =~ /^\s*(\d+)-(\d+)-(\d+)\s*$/i ){
		return DateTime->new(
			year	=> $1,
			month	=> $2,
			day	=> $3,
			time_zone	=> 'local',
		);
	}

	return;
}
